import os
import logging
import asyncio

from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types

from tgbot.dialogs import dialog_options

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

qaAnonEnabledForChatId = set()
qa = {}          # –°–ª–æ–≤–∞—Ä—å: chat_id -> list[str]
consultation = {}  # –°–ª–æ–≤–∞—Ä—å: chat_id -> list[str]


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üí∏ –°—Ç–∏–ø–µ–Ω–¥–∏–∏")],
        [types.KeyboardButton(text="üöó –ü—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏")],
        [types.KeyboardButton(text="üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")],
        [types.KeyboardButton(text="üíº –ü—Ä–æ–µ–∫—Ç—ã –∏ –ù–£–ì–∏")],
        [types.KeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [types.KeyboardButton(text="üë• –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [types.KeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! \n"
        "–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ Unlocking Academia, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∂–µ–ª–∞—é—â–∏—Ö —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –Ω–∞—É—á–Ω–æ–π —Å—Ñ–µ—Ä–µ.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º: —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö, –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç. –¥. \n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é"
    )
    await message.answer(text, reply_markup=keyboard)

@dp.message()
async def handle_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()

    for option in dialog_options:
        if text == option.button_text or text == option.command_text:
            await option.action(message)
            qaAnonEnabledForChatId.discard(chat_id)
            qa.pop(chat_id, None)
            consultation.pop(chat_id, None)
            return

    if chat_id in qaAnonEnabledForChatId:
        data = [text]
        qaAnonEnabledForChatId.discard(chat_id)
        qa.pop(chat_id, None)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω.")
        return

    if chat_id in qa:
        if len(qa[chat_id]) == 0:
            qa[chat_id].append(text)
            await message.answer("–ê —Ç–µ–ø–µ—Ä—å, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
            return
        else:
            qa[chat_id].append(text)
            data = qa[chat_id]
            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è:)")
            qa.pop(chat_id, None)
            qaAnonEnabledForChatId.discard(chat_id)
            return

    if chat_id in consultation:
        if len(consultation[chat_id]) == 0:
            consultation[chat_id].append(text)
            await message.answer("–° –∫–µ–º –∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è? –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
            return
        else:
            consultation[chat_id].append(text)
            data = consultation[chat_id]
            await message.answer("–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ –ø—Ä–∏–¥–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:)")
            consultation.pop(chat_id, None)
            qaAnonEnabledForChatId.discard(chat_id)
            qa.pop(chat_id, None)
            return

    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :(")

@dp.callback_query(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    data = callback_query.data

    if data == "q&a_anon":
        qaAnonEnabledForChatId.add(chat_id)
        qa.pop(chat_id, None)
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    elif data == "q&a":
        qa[chat_id] = []
        qaAnonEnabledForChatId.discard(chat_id)
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    elif data == "consultation":
        consultation[chat_id] = []
        qaAnonEnabledForChatId.discard(chat_id)
        qa.pop(chat_id, None)
        await bot.send_message(chat_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, —Ç–µ–ª–µ–≥—Ä–∞–º –∏ —Ç.–ø.)")
    await bot.answer_callback_query(callback_query.id)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
